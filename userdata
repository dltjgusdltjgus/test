#!/bin/bash

# 설치
# 1. kubectl 설치 (EKS 1.23.13 버전용)
curl -o /usr/local/bin/kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.23.13/2022-10-31/bin/linux/amd64/kubectl
chmod +x /usr/local/bin/kubectl
# 2. jq 설치 (JSON 처리 도구)
yum install -y jq
# 4. bash-completion 설치 (명령어 자동 완성)
yum install -y bash-completion
# 5. eksctl 설치 (EKS 클러스터 관리 도구)
curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
mv -v /tmp/eksctl /usr/local/bin
# 6. Docker 설치 및 서비스 활성화
dnf install -y docker
systemctl enable --now docker
systemctl start docker
# 7. Git 설치
dnf install -y git
# git clone
git clone https://github.com/joozero/amazon-eks-flask.git
git clone https://github.com/joozero/amazon-eks-frontend.git
git clone https://github.com/dltjgusdltjgus/k8s-manifest-repo.git
git clone https://github.com/dltjgusdltjgus/front-app-repo.git
#
mkdir -p ~/amazon-eks-frontend/.github/workflows
mkdir -p ~/k8s-manifest-repo/base
mkdir -p ~/k8s-manifest-repo/overlays/dev
# 8.IAM 정책 파일을 다운로드하고, OIDC 제공자를 EKS 클러스터에 연결
curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.7.0/docs/install/iam_policy.json
eksctl utils associate-iam-oidc-provider \
    --region ${AWS_REGION} \
    --cluster eks-demo \
    --approve
# 9. nodejs설치
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
export NVM_DIR="$HOME/.nvm"
source "$NVM_DIR/nvm.sh"
echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.bashrc
echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.bashrc
echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"' >> ~/.bashrc
source ~/.bashrc
nvm ls-remote | grep v14.16.1
nvm install v14.16.1
nvm alias default v14.16.1
#
aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

# IAM 정책 파일 다운로드
curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.7.0/docs/install/iam_policy.json
# OIDC Provider 연동
eksctl utils associate-iam-oidc-provider \
    --region ${AWS_REGION} \
    --cluster eks-demo \
    --approve
# cert-manager 설치
kubectl apply --validate=false -f \
https://github.com/jetstack/cert-manager/releases/download/v1.14.1/cert-manager.yaml
# ALB Controller 매니페스트 다운로드
mkdir -p manifests/alb-ingress-controller && \
cd manifests/alb-ingress-controller | \
wget https://github.com/kubernetes-sigs/aws-load-balancer-controller/releases/download/v2.7.0/v2_7_0_full.yaml

# 
aws ecr get-login-password --region ${AWS_REGION} | \
 docker login --username AWS --password-stdin \
 $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

# ecr 생성
aws ecr create-repository \
--repository-name demo-flask-backend \
--image-scanning-configuration scanOnPush=true \
--region ${AWS_REGION}
aws ecr create-repository \
 --repository-name demo-frontend \
 --image-scanning-configuration scanOnPush=true \
 --region ${AWS_REGION}




TOKEN=$(curl -X PUT \
"http://169.254.169.254/latest/api/token" -H \
"X-aws-ec2-metadata-token-ttl-seconds: 21600")

##메타데이터에서 자동으로 가져오기 AWS_REGION
export AWS_REGION=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region')
echo "export AWS_REGION=${AWS_REGION}" | tee -a ~/.bash_profile

##메타데이터에서 자동으로 가져오기 ACCOUNT_ID
export ACCOUNT_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.accountId')
echo "export ACCOUNT_ID=${ACCOUNT_ID}" | tee -a ~/.bash_profile

aws configure set aws_access_key_id  ${{ secrets.AWS_ACCESS_KEY_ID }}
aws configure set aws_secret_access_key ${{ AWS_SECRET_ACCESS_KEY }}
aws configure set default.region ${AWS_REGION}
aws configure set output yaml # 출력 형식을 YAML로 설정

export GITHUB_USERNAME=dltjgusdltjgus


# 홈 디렉토리로 이동하여 eksctl 클러스터 설정 파일 생성
cd ~
cat << EOF > eks-cluster.yaml
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: eks-demo                     # 생성할 EKS 클러스터명
  region: \${AWS_REGION}             # 클러스터를 생성할 리전
  version: "1.25"                    # 쿠버네티스 버전

vpc:
  cidr: "192.168.0.0/16"             # 클러스터에서 사용할 VPC의 CIDR

managedNodeGroups:
  - name: node-group                 # 노드 그룹명
    instanceType: m5.large           # 워커 노드의 인스턴스 타입
    desiredCapacity: 3               # 워커 노드 개수
    volumeSize: 10                   # EBS 볼륨 크기 (GiB)
    iam:
      withAddonPolicies:
        imageBuilder: true           # ECR 접근 권한
        albIngress: true             # ALB Ingress 컨트롤러 권한
        cloudWatch: true             # CloudWatch 로그 권한
        autoScaler: true             # 오토스케일링 권한

cloudWatch:
  clusterLogging:
    enableTypes: ["*"]               # 모든 로그 유형 활성화
EOF

# 클러스터 생성
eksctl create cluster -f eks-demo-cluster.yml 

rolearn=$(aws sts get-caller-identity --query Arn --output text)

# aws-auth ConfigMap 파일을 생성하여 kubectl apply로 적용
cat << EOF > /tmp/aws-auth.yaml
apiVersion: v1
data:
  mapRoles: |
    - groups:
      - system:bootstrappers
      - system:nodes
      rolearn: arn:aws:iam::390844776196:role/eksctl-eks-demo-nodegroup-node-gro-NodeInstanceRole-bpZwTKpFFb13
      username: system:node:{{EC2PrivateDNSName}}
    - groups:
      - system:masters
      rolearn: arn:aws:iam::390844776196:root
      username: admin
  mapUsers: |
    - groups:
      - system:masters
      userarn: arn:aws:iam::390844776196:user/dltjgus
      username: admin
kind: ConfigMap
metadata:
  creationTimestamp: "2025-04-14T02:20:05Z"
  name: aws-auth
  namespace: kube-system
  resourceVersion: "5095"
  uid: e4c82331-7d53-4e96-b09a-f242e82f2b23
EOF
cd ~
cd manifests/alb-ingress-controller |\
curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.7.0/docs/install/iam_policy.json \
eksctl utils associate-iam-oidc-provider \
    --region ${AWS_REGION} \
    --cluster eks-demo \
    --approve





















